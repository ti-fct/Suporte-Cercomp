#Requires -Version 5
#Requires -RunAsAdministrator

<#
.SYNOPSIS
    Script Modular de Manuten√ß√£o Windows - UFG Campus Aparecida
.DESCRIPTION
    Execute com: irm RAW_URL_MAIN | iex
.NOTES
    Vers√£o: 3.1
    Autor: Departamento de TI UFG (Diego)
#>

function Show-Menu {
    Clear-Host
    Write-Host @"  
    
    
	 ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
	 ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù 
	 ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó
	 ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë
	 ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
	  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù 
    
    Universidade Federal de Goi√°s
    Faculdade de Ci√™ncias e Tecnologia
"@ -ForegroundColor Blue

    Write-Host "`n          Campus Aparecida`n" -ForegroundColor Yellow
    Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan
    Write-Host " 1. üìú Listar Programas Instalados" -ForegroundColor Magenta
    Write-Host " 2. üíª Alterar Nome do Computador" -ForegroundColor Cyan
    Write-Host " 3. üèõ Aplicar GPOs da FCT" -ForegroundColor Blue
    Write-Host " 4. üßπ Restaurar GPOs Padr√£o do Windows" -ForegroundColor DarkYellow
    Write-Host " 5. üîÑ Atualizar GPOs (Usar ap√≥s aplicar ou restaurar as GPOs)" -ForegroundColor Green
    Write-Host " 6. üõí Reset Windows Store" -ForegroundColor Blue
    Write-Host " 7. üîì Habilitar Acesso SMB no Win11 24H2" -ForegroundColor DarkCyan
    Write-Host " 8. üßº Labs Limpeza Geral do Windows (Beta)" -ForegroundColor DarkCyan
    Write-Host " 9. üöÄ Reiniciar Computador" -ForegroundColor Red
    Write-Host " 10. ‚ùå Sair do Script" -ForegroundColor DarkGray
    Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan
}

function Invoke-PressKey {
    Read-Host "`nPressione Enter para continuar..."
}

function Testar-Admin {
    if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
        Write-Host "[‚ö†] Elevando privil√©gios..." -ForegroundColor Yellow
        Start-Process powershell "-NoProfile -ExecutionPolicy Bypass -Command `"irm RAW_URL_MAIN | iex`"" -Verb RunAs
        exit
    }
}

function Listar-ProgramasInstalados {
    try {
        $dateStamp = Get-Date -Format "yyyyMMdd-HHmmss"
        $fileName = "apps-instalados-$dateStamp.txt"
        $filePath = Join-Path -Path $env:USERPROFILE -ChildPath "Desktop\$fileName"

        Write-Host "`n[üîç] Coletando dados de programas instalados..." -ForegroundColor Yellow

        $registryPaths = @(
            "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*",
            "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*"
        )

        $apps = $registryPaths | ForEach-Object {
            Get-ItemProperty $_ | Where-Object DisplayName -ne $null
        } | Sort-Object DisplayName

        $apps | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate |
        Format-Table -AutoSize |
        Out-File -FilePath $filePath -Width 200

        Write-Host "[üìÇ] Relat√≥rio salvo em: $filePath" -ForegroundColor Green
        Write-Host "[‚Ñπ] Programas encontrados: $($apps.Count)" -ForegroundColor Cyan
    }
    catch {
        Write-Host "[‚ùó] Erro na gera√ß√£o do relat√≥rio: $($_.Exception.Message)" -ForegroundColor Red
    }
    finally {
        Invoke-PressKey
    }
}

function Alterar-NomeComputador {
    try {
        $currentName = $env:COMPUTERNAME
        Write-Host "`n[üíª] Nome atual do computador: $currentName" -ForegroundColor Cyan

        do {
            $newName = Read-Host "`nDigite o novo nome (15 caracteres alfanum√©ricos)"
        } until ($newName -match '^[a-zA-Z0-9-]{1,15}$')

        if ($newName -eq $currentName) {
            Write-Host "[‚Ñπ] O nome informado √© igual ao atual." -ForegroundColor Yellow
            return
        }

        if ((Read-Host "`nConfirma altera√ß√£o para '$newName'? (S/N)") -eq 'S') {
            Rename-Computer -NewName $newName -Force -ErrorAction Stop
            Write-Host "[‚úÖ] Nome alterado com sucesso!" -ForegroundColor Green

            if ((Read-Host "`nReiniciar agora? (S/N)") -eq 'S') {
                shutdown /r /f /t 15
                exit
            }
        }
    }
    catch {
        Write-Host "[‚ùó] Erro na opera√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
    }
    finally {
        Invoke-PressKey
    }
}

function Aplicar-GPOsFCT {
    try {
        Write-Host "`n[üèõ] Conectando ao servidor de pol√≠ticas..." -ForegroundColor DarkMagenta

        $gpoPaths = @{
            User    = "\\fog\gpos\user.txt"
            Machine = "\\fog\gpos\machine.txt"
        }

        $gpoPaths.GetEnumerator() | ForEach-Object {
            if (-not (Test-Path $_.Value)) { 
                throw "Arquivo $($_.Key) GPO n√£o encontrado em $($_.Value)" 
            }
        }

        $gpoPaths.GetEnumerator() | ForEach-Object {
            Write-Host "‚îú‚îÄ Aplicando pol√≠tica $($_.Key)..." -ForegroundColor Cyan
            & "\\fog\gpos\lgpo.exe" /t $_.Value 2>&1 | Out-Null
            if ($LASTEXITCODE -ne 0) { throw "Erro ${LASTEXITCODE} na aplica√ß√£o" }
        }

        Write-Host "[‚úÖ] Pol√≠ticas aplicadas com sucesso!" -ForegroundColor Green
        Write-Host "[‚ö†] Execute a op√ß√£o 5 para atualizar as pol√≠ticas" -ForegroundColor Yellow
    }
    catch {
        Write-Host "[‚ùó] Falha na aplica√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
    }
    finally {
        Invoke-PressKey
    }
}

function Restaurar-PoliticasPadrao {
    try {
        Write-Host "`n[üßπ] Iniciando restaura√ß√£o de seguran√ßa..." -ForegroundColor DarkYellow

        $confirm = Read-Host "`nEsta opera√ß√£o REMOVER√Å todas as pol√≠ticas personalizadas. Continuar? (S/N)"
        if ($confirm -ne 'S') { return }

        $gpoPaths = @(
            "$env:windir\System32\GroupPolicy",
            "$env:windir\System32\GroupPolicyUsers"
        )

        $gpoPaths | ForEach-Object {
            if (Test-Path $_) {
                Remove-Item $_ -Recurse -Force -ErrorAction Stop
                Write-Host "‚îú‚îÄ [$(Split-Path $_ -Leaf)] Removido" -ForegroundColor Green
            }
        }

        Write-Host "[‚úÖ] Restaura√ß√£o conclu√≠da!" -ForegroundColor Green
        gpupdate /force | Out-Null
    }
    catch {
        Write-Host "[‚ùó] Erro na restaura√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
    }
    finally {
        Invoke-PressKey
    }
}

function Atualizar-PoliticasGrupo {
    try {
        Write-Host "`n[üîÑ] For√ßando atualiza√ß√£o de pol√≠ticas..." -ForegroundColor Yellow
        $output = gpupdate /force 2>&1

        if ($LASTEXITCODE -eq 0) {
            Write-Host "[‚úÖ] Atualiza√ß√£o conclu√≠da: $($output -join ' ')" -ForegroundColor Green
        }
        else {
            Write-Host "[‚ùå] Erro ${LASTEXITCODE}: $output" -ForegroundColor Red
        }
    }
    catch {
        Write-Host "[‚ùó] Erro cr√≠tico: $($_.Exception.Message)" -ForegroundColor Red
    }
    finally {
        Invoke-PressKey
    }
}

function Reiniciar-LojaWindows {
    try {
        Write-Host "`n[üõ†] Iniciando reset avan√ßado da Microsoft Store..." -ForegroundColor Yellow

        $etapas = @(
            @{Nome = "Resetando ACLs"; Comando = { icacls "C:\Program Files\WindowsApps" /reset /t /c /q | Out-Null } },
            @{Nome = "Executando WSReset"; Comando = { Start-Process wsreset -NoNewWindow -Wait } },
            @{Nome = "Finalizando processos"; Comando = { 
                Get-Process -Name WinStore.App, WSReset -ErrorAction SilentlyContinue | 
                Stop-Process -Force -ErrorAction SilentlyContinue 
            }}
        )

        foreach ($etapa in $etapas) {
            Write-Host "‚îú‚îÄ $($etapa.Nome)..." -ForegroundColor Cyan
            & $etapa.Comando
        }

        Write-Host "[‚úÖ] Loja reinicializada com sucesso!`n" -ForegroundColor Green
    }
    catch {
        Write-Host "[‚ùó] Falha no processo: $($_.Exception.Message)" -ForegroundColor Red
    }
    finally {
        Invoke-PressKey
    }
}

function Habilitar-Smb {
    try {
        Write-Host "`n[üîì] Habilita SMB no Windows 24H2 para acesso ao \\fog..." -ForegroundColor Cyan
        $currentSetting = (Get-SmbClientConfiguration).EnableInsecureGuestLogons
        
        if (-not $currentSetting) {
            Set-SmbClientConfiguration -EnableInsecureGuestLogons $true -Force
            Write-Host "[‚úÖ] Acesso SMB habilitado com sucesso!" -ForegroundColor Green
        }
        else {
            Write-Host "[‚Ñπ] Acesso SMB j√° est√° habilitado." -ForegroundColor Cyan
        }
    }
    catch {
        Write-Host "[‚ùó] Falha na configura√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
    }
    finally {
        Invoke-PressKey
    }
}

function Limpeza-Labs {
    try {
        Write-Host "`n[üßº] Iniciando limpeza completa do Windows e usu√°rios..." -ForegroundColor DarkCyan

        # 1. Limpeza de arquivos dos usu√°rios
        Write-Host "‚îú‚îÄ Limpando arquivos dos labs..." -ForegroundColor Yellow
        $pathsToClean = @(
            "C:\Users\*\Downloads\*",
            "C:\Users\*\Desktop\*"
        )
        
        $pathsToClean | ForEach-Object {
            Get-ChildItem $_ -ErrorAction SilentlyContinue | 
            Where-Object { $_.Name -ne "desktop.ini" -and (-not $_.PSIsContainer) } | 
            Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
        }

        # 2. Reset de configura√ß√µes de sistema
        Write-Host "‚îú‚îÄ Restaurando configura√ß√µes de rede e energia..." -ForegroundColor Yellow
        $commands = @(
            "powercfg /restoredefaultschemes",
            "netsh winsock reset",
            "netsh int ip reset",
            "netsh advfirewall reset",
            "ipconfig /flushdns"
        )
        $commands | ForEach-Object { Invoke-Expression $_ | Out-Null }

        # 3. Remo√ß√£o de contas Microsoft
        Write-Host "‚îú‚îÄ Removendo contas Microsoft..." -ForegroundColor Yellow
        Get-CimInstance -ClassName Win32_UserAccount -ErrorAction SilentlyContinue | 
        Where-Object { $_.Caption -like "*@*" -and -not $_.LocalAccount } | 
        ForEach-Object { net user $_.Name /delete 2>$null }

        # 4. Limpeza dos Browsers

# Finaliza processo dos navegadores

# Caminhos dos perfis dos navegadores

# Fun√ß√£o para remover diret√≥rio se existir

# Resetando os navegadores


        # 5. Limpeza do sistema
        Write-Host "‚îú‚îÄ Executando limpeza final..." -ForegroundColor Yellow
		# Defina o caminho correto do registro
$RegistryPath = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VolumeCaches"

# Para cada chave em VolumeCaches, configure a propriedade que habilita a op√ß√£o de limpeza
Get-ChildItem -Path $RegistryPath | ForEach-Object { 
    Set-ItemProperty -Path $_.PSPath -Name StateFlags001 -Value 2 
}

        Start-Process -FilePath cleanmgr -ArgumentList "/sagerun:1" -Wait -WindowStyle Hidden

        # 6. Verifica√ß√£o de integridade
        Write-Host "‚îú‚îÄ Verificando sa√∫de do sistema..." -ForegroundColor Cyan
        try {
            DISM /Online /Cleanup-Image /RestoreHealth | Out-Null
            sfc /scannow | Out-Null
        }
        catch {
            Write-Host "[‚ùó] Erro na verifica√ß√£o do sistema: $($_.Exception.Message)" -ForegroundColor Red
        }

        Write-Host "`n[‚úÖ] Limpeza conclu√≠da com sucesso!" -ForegroundColor Green
        if ((Read-Host "`nDeseja reiniciar o computador agora? (S/N)") -eq 'S') {
            shutdown /r /f /t 15
        }
    }
    catch {
        Write-Host "[‚ùó] Erro durante a limpeza: $($_.Exception.Message)" -ForegroundColor Red
    }
    finally {
        Invoke-PressKey
    }
}

function Reiniciar-Computador {
    try {
        Write-Host "`n[üö®] ATEN√á√ÉO: Opera√ß√£o irrevers√≠vel!" -ForegroundColor Red
        $confirmacao = Read-Host "`nCONFIRME com 'REINICIAR' para prosseguir"
        if ($confirmacao -eq 'REINICIAR') {
            Write-Host "[‚è≥] Rein√≠cio em 15 segundos..." -ForegroundColor Yellow
            shutdown /r /f /t 15
            exit
        }
        else {
            Write-Host "[‚ùå] Opera√ß√£o cancelada" -ForegroundColor Red
        }
    }
    finally {
        Invoke-PressKey
    }
}

# Execu√ß√£o Principal
Testar-Admin

while ($true) {
    try {
        Show-Menu
        switch (Read-Host "`nSelecione uma op√ß√£o [1-10]") {
            '1'  { Listar-ProgramasInstalados }
            '2'  { Alterar-NomeComputador }
            '3'  { Aplicar-GPOsFCT }
            '4'  { Restaurar-PoliticasPadrao }
            '5'  { Atualizar-PoliticasGrupo }
            '6'  { Reiniciar-LojaWindows }
            '7'  { Habilitar-Smb }
            '8'  { Limpeza-Labs }
            '9'  { Reiniciar-Computador }
            '10' { exit }
            default {
                Write-Host "[‚ùå] Op√ß√£o inv√°lida!" -ForegroundColor Red
                Start-Sleep -Seconds 1
            }
        }
    }
    catch {
        Write-Host "[‚ùó] Erro n√£o tratado: $($_.Exception.Message)" -ForegroundColor Red
        Invoke-PressKey
    }
}
